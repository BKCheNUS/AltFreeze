#!/usr/bin/env python
# coding: utf-8

# In[ ]:


#Blocks for the Neural Net

#import key packages
import torch
import numpy as np
import torchvision
from torch.utils.data.sampler import SubsetRandomSampler
import torch.nn.functional as F
import torch.nn as nn

class CNNBlocks(nn.Module):
    def __init__(self,kernelsizes,channels,pool):
        super(CNNBlocks, self).__init__()
        a = kernelsizes[0]
        b = kernelsizes[1]
        c1 = channels[0]
        c2 = channels[1]
        c3 = channels[2]
        self.pool = pool
        self.conv1 = nn.Conv2d(c1, c2, kernel_size = a, padding = 1)
        torch.nn.init.xavier_normal_(self.conv1.weight)
        self.batchnorm1 = nn.BatchNorm2d(c2)		
        self.conv2 = nn.Conv2d(c2,c3 , kernel_size = b, padding = 1)
        torch.nn.init.xavier_normal_(self.conv2.weight)
        self.batchnorm2 = nn.BatchNorm2d(c3)		
        self.dropout = nn.Dropout(0.4)
    
    def forward(self, x):
        x = self.conv1(x)
        x = self.batchnorm1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = self.batchnorm2(x)
        if self.pool == 1:
            x = F.relu(F.max_pool2d(x,2))
        #x = self.dropout(x)
        return x



#MLP block for the branch
class MLPBlock(nn.Module):
    def __init__(self):
        super(MLPBlock, self).__init__()
        self.fc1 = nn.Linear(384, 10)
        torch.nn.init.xavier_normal_(self.fc1.weight) 
        self.dropout1 = nn.Dropout(0.2)

    def forward(self, x):
        x = F.avg_pool2d(x,5)
        x = x.view(-1, 1*1*384)
        x = self.fc1(x)
        x = self.dropout1(x)		
        x = F.relu(x)
        return x	
mlpblock = MLPBlock()

class EnsembleModel(nn.Module):
    def __init__(self):
        super(EnsembleModel, self).__init__()
        self.cnnblock1 = CNNBlocks([3,3],[3,48,96],1)
        #self.cnnblock1 = CNNBlock1()
        #self.cnnblock1.apply(init_weights)
        self.cnnblock2 = CNNBlocks([4,4],[96,192,384],1)
        #self.cnnblock2 = CNNBlock2()
        #self.cnnblock2.apply(init_weights)
        self.cnnblock3 = CNNBlocks([4,4],[384,384,384], 0)
        #self.cnnblock3 = CNNBlock3()
        #self.cnnblock3.apply(init_weights)
        self.mlpblock = MLPBlock()
    
    def forward(self, x):
        x1 = self.cnnblock1(x)
        x2 = self.cnnblock2(x1)
        x3 = self.cnnblock3(x2)
        x4 = self.mlpblock(x3)
        return F.log_softmax(x4, dim=1)

    
